package com.google.launchpod;

import static com.google.appengine.api.datastore.FetchOptions.Builder.withLimit;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.google.launchpod.data.Item;
import com.google.launchpod.data.RSS;
import com.google.launchpod.servlets.TranslationApiDelegate;
import com.google.launchpod.servlets.TranslationServlet;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

/**
 * Runs unit tests for the FormHandlerServlet that contains doPost(), doGet(),
 * and xmlString() methods.
 */
@RunWith(JUnit4.class)
public class TranslationServletTest extends Mockito {

  @InjectMocks
  private TranslationApiDelegate servlet = new TranslationApiDelegate();

  @Mock
  HttpServletRequest request;

  @Mock
  HttpServletResponse response;

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());

  // keys
  private static final String USER_FEED = "UserFeed";
  private static final String LANGUAGE = "language";
  private static final String RSS_FEED_LINK = "rssFeedLink";
  private static final String XML_STRING = "xmlString";
  private static final String EMAIL = "email";
  private static final String TEST_PODCAST_TITLE = "American Life";
  private static final String TEST_TARGET_LANGUAGE = "es";
  private static final String TEST_LANGUAGE = "en";
  private static final String TEST_DESCRIPTION = "Episode generated by launchpod";
  private static final String TEST_MP3_LINK = "this-is-a-test.mp3";
  private static final String TEST_ID = "123456";
  private static final String TEST_EMAIL = "123@abc.com";
  private static final String BASE_URL = "https://launchpod-step18-2020.appspot.com/rss-feed?id=";
  private static final RSS TEST_RSS_FEED = new RSS(TEST_PODCAST_TITLE, TEST_DESCRIPTION, TEST_LANGUAGE, TEST_EMAIL,
      TEST_MP3_LINK);
  private static final XmlMapper XML_MAPPER = new XmlMapper();

  // Expected Assert test variables
  private static final String EXPECTED_ITEM_TITLE = "emerican LifA";
  private static final String EXPECTED_CHANNEL_ITEM_DESCRIPTION = "dpisode generated by launchpoE";

  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);
    helper.setUp();
  }

  @After
  public void tearDown() {
    helper.tearDown();
  }

  /**
   * Assert that doPost() creates a different xml string that is "translated" and
   * stores it into datastore as a new entity
   */
  @Test
  public void doPost_ReturnsCorrectXmlString() throws IOException {
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    String testXmlString = RSS.toXmlString(TEST_RSS_FEED);
    // Place item into local datastore
    Entity testEntity = new Entity(USER_FEED);
    testEntity.setProperty(EMAIL, TEST_EMAIL);
    testEntity.setProperty(LANGUAGE, TEST_LANGUAGE);
    // generate valid test ID
    testEntity.setProperty(XML_STRING, testXmlString);
    datastore.put(testEntity);
    String testId = KeyFactory.keyToString(testEntity.getKey());

    when(request.getParameter(RSS_FEED_LINK)).thenReturn(BASE_URL + testId);
    when(request.getParameter(LANGUAGE)).thenReturn(TEST_TARGET_LANGUAGE);

    StringWriter stringWriter = new StringWriter();
    PrintWriter writer = new PrintWriter(stringWriter);
    when(response.getWriter()).thenReturn(writer);

    servlet.doPost(request, response);

    datastore.delete(testEntity.getKey());
    Query query = new Query(USER_FEED);
    Entity translatedEntity = datastore.prepare(query).asSingleEntity();

    assertEquals(TEST_TARGET_LANGUAGE, (String) translatedEntity.getProperty(LANGUAGE));
    assertEquals(1, datastore.prepare(new Query(USER_FEED)).countEntities(withLimit(5)));

    String testExpectedKey = KeyFactory.keyToString(translatedEntity.getKey());

    assertTrue(stringWriter.toString().contains(BASE_URL + testExpectedKey));
  }

  /**
   * check to see if translate method modifies the xml string and "translates" the
   * fields
   * 
   * @throws IOException
   */
  @Test
  public void translateMethod_TranslatesXmlStringFields() throws IOException {
    String testXmlString = RSS.toXmlString(TEST_RSS_FEED);
    // Place item into local datastore
    Entity testEntity = new Entity(USER_FEED);
    testEntity.setProperty(EMAIL, TEST_EMAIL);
    testEntity.setProperty(LANGUAGE, TEST_LANGUAGE);
    testEntity.setProperty(XML_STRING, testXmlString);

    String xmlString = (String) testEntity.getProperty(XML_STRING);
    RSS rssFeed = XML_MAPPER.readValue(xmlString, RSS.class);

    // Channel description
    String translate = TranslationApiDelegate.Translate(rssFeed.getChannel().getDescription());
    rssFeed.getChannel().setDescription(translate);
    assertEquals(EXPECTED_CHANNEL_ITEM_DESCRIPTION, translate);

    // Language
    rssFeed.getChannel().setLanguage(TEST_TARGET_LANGUAGE);
    assertEquals(TEST_TARGET_LANGUAGE, rssFeed.getChannel().getLanguage());

    // Episodes
    for (Item item : rssFeed.getChannel().getItem()) {
      // Episode title
      translate = TranslationApiDelegate.Translate(item.getTitle());
      item.setTitle(translate);
      assertEquals(EXPECTED_ITEM_TITLE, translate);

      // Episode description
      translate = TranslationApiDelegate.Translate(item.getDescription());
      item.setDescription(translate);
      assertEquals(EXPECTED_CHANNEL_ITEM_DESCRIPTION, translate);
    }
  }

  /**
   * Assert that doPost() obtains the correct input language from the form into
   * datastore
   */
  @Test
  public void doPost_StoresCorrectLanguageFromForm() throws IOException {
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    String testXmlString = RSS.toXmlString(TEST_RSS_FEED);
    // Place item into local datastore
    Entity testEntity = new Entity(USER_FEED);
    testEntity.setProperty(EMAIL, TEST_EMAIL);

    testEntity.setProperty(XML_STRING, testXmlString);
    datastore.put(testEntity);
    String testId = KeyFactory.keyToString(testEntity.getKey());

    when(request.getParameter(RSS_FEED_LINK)).thenReturn(BASE_URL + testId);
    when(request.getParameter(LANGUAGE)).thenReturn(TEST_LANGUAGE);

    StringWriter stringWriter = new StringWriter();
    PrintWriter writer = new PrintWriter(stringWriter);
    when(response.getWriter()).thenReturn(writer);

    servlet.doPost(request, response);

    datastore.delete(testEntity.getKey());
    Query query = new Query(USER_FEED);
    Entity translatedEntity = datastore.prepare(query).asSingleEntity();

    verify(request, atLeast(1)).getParameter(LANGUAGE);
    writer.flush();

    assertEquals(1, datastore.prepare(query).countEntities(withLimit(5)));
    assertEquals(TEST_LANGUAGE, (String) translatedEntity.getProperty(LANGUAGE));
  }

  /**
   * Expect doPost to throw IOException when language field is empty
   * 
   * @throws IOException
   */
  @Test
  public void doPost_ThrowsException_WhenLanguageInputEmpty() throws IOException {
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

    when(request.getParameter(LANGUAGE)).thenReturn("");
    when(request.getParameter(RSS_FEED_LINK)).thenReturn(BASE_URL + TEST_ID);

    thrown.expect(IOException.class);
    thrown.expectMessage("Please give valid language.");

    servlet.doPost(request, response);

    assertEquals(0, datastore.prepare(new Query(USER_FEED)).countEntities(withLimit(5)));
  }

  /**
   * Expect doPost to throw IOException when rssFeedLink field is empty
   * 
   * @throws IOException
   */
  @Test
  public void doPost_ThrowsException_WhenRssFeedLinkInputEmpty() throws IOException {
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

    when(request.getParameter(LANGUAGE)).thenReturn(TEST_LANGUAGE);
    when(request.getParameter(RSS_FEED_LINK)).thenReturn("");

    thrown.expect(IOException.class);
    thrown.expectMessage("Please give valid link.");

    servlet.doPost(request, response);

    assertEquals(0, datastore.prepare(new Query(USER_FEED)).countEntities(withLimit(5)));
  }

  /**
   * Assert that getIdFromUrl() obtains the correct input id from the rssFeedLink in the
   * form
   */
  @Test
  public void getIdFromUrl_GeneratesCorrectId() throws IOException {
    String testId = TranslationServlet.getIdFromUrl(BASE_URL + TEST_ID);

    assertEquals(TEST_ID, testId);
  }
}